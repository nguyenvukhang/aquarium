use aquarium::error::Result;
use aquarium::Game;

async fn try_main(id: &str) -> Result<()> {
    let game = Game::from_id(id).await?;
    let (grid, solved) = game.solve();
    match solved {
        true => println!("Successful solve!"),
        false => println!("Failed to solve."),
    }
    println!("{:?}", grid);
    Ok(())
}

#[tokio::main]
async fn main() {
    let cols = [3, 5, 3, 3, 3, 4, 4, 5, 6, 6, 8, 8, 7, 10, 7];
    let rows = [3, 2, 5, 4, 8, 8, 3, 5, 3, 3, 7, 4, 5, 13, 9];
    let grps = [
        [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
        [1, 4, 4, 5, 5, 5, 1, 1, 2, 2, 2, 6, 6, 7, 7],
        [1, 1, 4, 5, 4, 5, 1, 2, 2, 2, 8, 8, 6, 6, 6],
        [1, 1, 4, 4, 4, 5, 5, 9, 9, 9, 9, 9, 6, 10, 10],
        [1, 1, 11, 11, 11, 12, 9, 9, 13, 13, 14, 14, 15, 16, 17],
        [18, 11, 11, 12, 12, 12, 12, 19, 19, 20, 15, 15, 15, 16, 17],
        [18, 11, 11, 21, 22, 22, 19, 19, 20, 20, 23, 23, 15, 24, 17],
        [18, 25, 11, 21, 22, 22, 22, 19, 20, 20, 20, 20, 26, 24, 26],
        [18, 25, 11, 21, 27, 27, 22, 19, 20, 28, 20, 29, 26, 26, 26],
        [18, 18, 30, 31, 31, 27, 22, 28, 28, 28, 32, 29, 29, 26, 26],
        [33, 33, 30, 34, 34, 35, 22, 28, 36, 28, 32, 32, 29, 26, 29],
        [37, 38, 38, 38, 34, 35, 39, 36, 36, 36, 32, 40, 29, 29, 29],
        [37, 37, 41, 41, 34, 39, 39, 39, 39, 32, 32, 40, 29, 29, 29],
        [37, 34, 34, 34, 34, 37, 42, 43, 43, 43, 32, 43, 44, 44, 45],
        [37, 37, 37, 37, 37, 37, 42, 42, 42, 43, 43, 43, 45, 45, 45],
    ];
    let (cols, rows) = (cols.to_vec(), rows.to_vec());
    let grps = grps.iter().map(|v| v.to_vec()).collect();
    let game = Game::new(cols, rows, grps);
    println!("----------- START SOLVE -----------");
    let (grid, solved) = game.solve();
    println!("solved: {solved}");
    println!("grid: {grid:?}");
    println!("------------ END SOLVE ------------");
}

// #[tokio::main]
// async fn main() {
//     let id = match std::env::args().skip(1).next() {
//         Some(v) => v,
//         None => {
//             return println!("Please provide an id to test");
//         }
//     };
//     match try_main(&id).await {
//         Ok(_) => {}
//         Err(e) => println!("Error: {e:?}"),
//     };
//
//     println!("aquarium-rust: done execution!");
// }

#[cfg(test)]
mod tests {
    use aquarium::Game;

    macro_rules! test {
        (ignore, $name:ident, $cols:expr, $rows:expr, $grps:expr) => {
            #[ignore]
            #[test]
            fn $name() {
                test!($cols, $rows, $grps)
            }
        };
        ($name:ident, $cols:expr, $rows:expr, $grps:expr) => {
            #[test]
            fn $name() {
                test!($cols, $rows, $grps)
            }
        };
        ($cols:expr, $rows:expr, $grps:expr) => {{
            let (cols, rows) = ($cols.to_vec(), $rows.to_vec());
            let grps = $grps.iter().map(|v| v.to_vec()).collect();
            let game = Game::new(cols, rows, grps);
            let (grid, solved) = game.solve();
            if !solved {
                eprintln!("{:?}", grid);
            }
            assert!(solved);
        }};
    }

    test!(
        easy_6x6_v1, // MDoxMiw2NDUsNjY1
        [4, 5, 2, 2, 2, 2],
        [5, 2, 4, 2, 2, 2],
        [
            [1, 1, 2, 2, 2, 3],
            [1, 1, 3, 3, 3, 3],
            [4, 1, 5, 3, 5, 3],
            [4, 1, 5, 5, 5, 6],
            [5, 1, 1, 5, 6, 6],
            [5, 5, 5, 5, 6, 6]
        ]
    );

    test!(
        normal_6x6_v1, // MToxNSwxNjcsMDM3
        [4, 2, 1, 3, 5, 2],
        [1, 2, 1, 3, 5, 5],
        [
            [1, 1, 1, 1, 2, 3],
            [1, 4, 4, 4, 2, 3],
            [5, 4, 4, 6, 2, 3],
            [5, 4, 6, 6, 3, 3],
            [4, 4, 7, 3, 3, 8],
            [9, 4, 7, 8, 8, 8]
        ]
    );

    test!(
        normal_6x6_v2, // MToyLDE5NiwwNjk=
        [2, 4, 3, 1, 4, 5],
        [4, 1, 4, 4, 4, 2],
        [
            [1, 1, 1, 1, 2, 2],
            [3, 4, 2, 2, 2, 5],
            [3, 4, 4, 2, 5, 5],
            [4, 4, 6, 2, 5, 5],
            [7, 6, 6, 2, 8, 8],
            [7, 7, 7, 7, 9, 9]
        ]
    );

    test!(
        hard_6x6_v2, // MjozLDIyMSw1OTU=
        [3, 4, 4, 5, 4, 5],
        [4, 4, 5, 5, 2, 5],
        [
            [1, 2, 2, 3, 4, 5],
            [1, 6, 6, 3, 3, 5],
            [7, 7, 8, 8, 9, 10],
            [11, 11, 12, 12, 9, 10],
            [13, 14, 14, 15, 15, 16],
            [13, 17, 17, 18, 18, 16]
        ]
    );

    test!(
        easy_10x10_v1, // Mzo2LDU3MSw2MjM=
        [6, 7, 8, 5, 3, 7, 7, 7, 6, 3],
        [4, 7, 8, 7, 6, 6, 3, 4, 6, 8],
        [
            [1, 1, 1, 2, 3, 4, 4, 4, 4, 5],
            [1, 1, 2, 2, 3, 4, 5, 5, 4, 5],
            [1, 1, 1, 2, 3, 3, 5, 5, 5, 5],
            [1, 6, 1, 2, 3, 3, 5, 7, 7, 5],
            [8, 6, 6, 3, 3, 5, 5, 7, 7, 9],
            [8, 6, 6, 3, 10, 5, 7, 7, 7, 9],
            [8, 8, 6, 3, 10, 11, 11, 11, 9, 9],
            [8, 8, 8, 12, 12, 11, 9, 9, 9, 13],
            [8, 8, 8, 12, 12, 11, 14, 9, 9, 13],
            [8, 8, 8, 12, 14, 14, 14, 9, 13, 13]
        ]
    );

    test!(
        hard_10x10_v1, // NTo3LDQyMCwzODI=
        [9, 8, 7, 4, 4, 4, 8, 5, 3, 7],
        [6, 2, 5, 2, 9, 8, 5, 9, 5, 8],
        [
            [1, 1, 2, 2, 3, 4, 4, 5, 5, 5],
            [6, 6, 7, 3, 3, 5, 5, 5, 5, 5],
            [6, 7, 7, 7, 3, 5, 8, 8, 8, 8],
            [6, 9, 9, 9, 3, 5, 5, 10, 11, 8],
            [9, 9, 12, 12, 12, 13, 5, 10, 11, 11],
            [14, 14, 12, 12, 12, 13, 15, 15, 16, 11],
            [17, 18, 19, 20, 21, 21, 22, 16, 16, 23],
            [17, 18, 19, 20, 24, 21, 22, 16, 23, 23],
            [25, 26, 27, 20, 28, 29, 29, 30, 30, 23],
            [25, 26, 27, 27, 31, 32, 33, 33, 30, 30],
        ]
    );

    test!(
        hard_15x15_v1, // ODo0LDE1NSw2MjM=
        [3, 5, 3, 3, 3, 4, 4, 5, 6, 6, 8, 8, 7, 10, 7],
        [3, 2, 5, 4, 8, 8, 3, 5, 3, 3, 7, 4, 5, 13, 9],
        [
            [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
            [1, 4, 4, 5, 5, 5, 1, 1, 2, 2, 2, 6, 6, 7, 7],
            [1, 1, 4, 5, 4, 5, 1, 2, 2, 2, 8, 8, 6, 6, 6],
            [1, 1, 4, 4, 4, 5, 5, 9, 9, 9, 9, 9, 6, 10, 10],
            [1, 1, 11, 11, 11, 12, 9, 9, 13, 13, 14, 14, 15, 16, 17],
            [18, 11, 11, 12, 12, 12, 12, 19, 19, 20, 15, 15, 15, 16, 17],
            [18, 11, 11, 21, 22, 22, 19, 19, 20, 20, 23, 23, 15, 24, 17],
            [18, 25, 11, 21, 22, 22, 22, 19, 20, 20, 20, 20, 26, 24, 26],
            [18, 25, 11, 21, 27, 27, 22, 19, 20, 28, 20, 29, 26, 26, 26],
            [18, 18, 30, 31, 31, 27, 22, 28, 28, 28, 32, 29, 29, 26, 26],
            [33, 33, 30, 34, 34, 35, 22, 28, 36, 28, 32, 32, 29, 26, 29],
            [37, 38, 38, 38, 34, 35, 39, 36, 36, 36, 32, 40, 29, 29, 29],
            [37, 37, 41, 41, 34, 39, 39, 39, 39, 32, 32, 40, 29, 29, 29],
            [37, 34, 34, 34, 34, 37, 42, 43, 43, 43, 32, 43, 44, 44, 45],
            [37, 37, 37, 37, 37, 37, 42, 42, 42, 43, 43, 43, 45, 45, 45]
        ]
    );
}
